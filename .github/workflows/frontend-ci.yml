name: Frontend CI & Deploy

# /**
#  * CI/CD Pipeline for Smart Supply Pro â€” Frontend (React + Vite + Nginx)
#  *
#  * Triggers:
#  *   - On push to main.
#  *   - Only when files under frontend/, ops/nginx/, or this workflow change.
#  *
#  * Pipeline stages (high-level):
#  *   1) Checkout repository.
#  *   2) Sanity-check repository structure (defensive ls of key paths).
#  *   3) Node toolchain setup + dependency cache warmup (actions/setup-node).
#  *   4) Install dependencies and run unit tests with GitHub annotations (Vitest).
#  *   5) Build and push Docker image (repo-root context; skip in-image tests).
#  *   6) Install Koyeb CLI (non-interactive; latest with retry/fallback).
#  *   7) Authenticate and deploy by immutable image digest; pin service ports.
#  *   8) Health gate: wait until Koyeb service reports HEALTHY; dump diagnostics if not.
#  *   9) Smoke test public URL (200 on / and SPA fallback on deep link).
#  *
#  * Key design choices:
#  *   - Tests run OUTSIDE Docker for richer GitHub Annotations.
#  *   - Deployment pins by image digest for safe, reproducible rollouts/rollbacks.
#  *   - CLI-based health gate avoids transient 404/502 during router updates.
#  */

# Trigger: push to main, changes in frontend/ or ops/nginx/ or this workflow
on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'ops/nginx/**'
      - '.github/workflows/frontend-ci.yml'

# Permissions
permissions:
  contents: read
  packages: write

# Concurrency: only one run at a time, do not cancel in-progress
concurrency:
  group: frontend-ci
  cancel-in-progress: false

env:
  # Docker image repository (Docker Hub)
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/ssp-frontend
  # Backend API base baked into the Vite build
  VITE_API_BASE: https://inventoryservice.fly.dev
  # Koyeb target (set as repo secrets)
  KOYEB_APP: ${{ secrets.KOYEB_APP }}          # e.g., "inventory-service"
  KOYEB_SERVICE: ${{ secrets.KOYEB_SERVICE }}  # e.g., "frontend"
  # Public URL of the deployed service (used by smoke test)
  FRONTEND_URL: https://inventory-service.koyeb.app

# Define jobs
# Each job runs in a fresh instance of the specified virtual environment.
jobs:
  changes:
    name: Detect changed areas
    runs-on: ubuntu-latest
    outputs:
      frontend_changed: ${{ steps.compute.outputs.frontend_changed }}
    steps:
      - uses: actions/checkout@v4

      # /**
      #  * Computes which files have changed in the current push or pull request.
      #  * Sets output flags to indicate if frontend-related files were modified.
      #  */
      - name: Compute changed files (linter-safe)
        id: compute
        env:
          EVENT_NAME: ${{ github.event_name }}
          BEFORE: ${{ github.event.before }}
          BASE_REF: ${{ github.base_ref }}
          SHA: ${{ github.sha }}
        run: |
          set -euo pipefail

          # Determine the base for diff:
          # - For PRs, diff against the base branch ref
          # - For pushes, diff against the "before" commit SHA
          if [ "$EVENT_NAME" = "pull_request" ] && [ -n "$BASE_REF" ]; then
            git fetch --no-tags --depth=1 origin "$BASE_REF"
            BASE="origin/$BASE_REF"
          else
            git fetch --no-tags --depth=50 origin
            BASE="$BEFORE"
            # Fallback: if BEFORE is empty (e.g., very first push), compare against the previous commit
            if [ -z "$BASE" ]; then
              BASE="$(git rev-parse HEAD~1 || true)"
            fi
          fi

          echo "BASE: $BASE"
          echo "HEAD: $SHA"

          CHANGED="$(git diff --name-only "$BASE" "$SHA" || true)"
          echo "Changed files:"
          echo "$CHANGED" | sed 's/^/  - /' || true

          fe_changed=false
          echo "$CHANGED" | grep -E '^(frontend/|ops/nginx/|\.github/workflows/frontend-ci\.yml$)' >/dev/null && fe_changed=true || true

          echo "frontend_changed=$fe_changed" >> "$GITHUB_OUTPUT"

  # /**
  #  * Main job: Build, test, and Dockerize the frontend service.
  #  * Runs only if frontend-related files were changed.
  #  */
  build-and-deploy:
    needs: changes
    if: ${{ needs.changes.outputs.frontend_changed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      # ----------------------------------------------------------------------
      # 1) Source checkout
      # ----------------------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      # (Optional but recommended) Sanity check the expected tree
      - name: Sanity check list build context contents
        run: |
          echo "PWD = $PWD"
          ls -la
          ls -la frontend || true
          ls -la ops/nginx || true

      # ----------------------------------------------------------------------
      # 2) Node toolchain + dependency install
      #    - We install deps here (outside Docker) to run tests with annotations.
      #    - Cache: speeds up repeated installs across runs.
      # ----------------------------------------------------------------------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
          
      # Keep installing and testing in the same folder
      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      # ----------------------------------------------------------------------
      # 3) Unit tests with GitHub annotations (Vitest)
      #    Rationale:
      #      - Run outside Docker so failures surface as inline annotations.
      #      - Use the built-in 'github-actions' reporter for rich, per-test notes.
      #      - CI=true + --run ensures non-watch, deterministic execution in CI.
      # ----------------------------------------------------------------------
      - name: Run unit tests (Vitest with GH annotations)
        working-directory: frontend
        env:
          CI: "true"
        run: |
          npx vitest --reporter=default --reporter=github-actions --run

      # ----------------------------------------------------------------------
      # 4) Build & push Docker image (Nginx runtime)
      #    Design:
      #      - Build context: '.' (repo root) so Dockerfile can COPY ops/nginx/*.
      #      - Dockerfile: frontend/Dockerfile (multi-stage: Node build -> Nginx).
      #      - Tests inside Docker are disabled (RUN_TESTS=false) to avoid duplication.
      #      - Tagging via docker/metadata-action for 'latest' and immutable 'sha-*'.
      #      - Root .dockerignore trims context to keep builds fast and reproducible.
      # ----------------------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Note: DOCKER_USERNAME and DOCKER_PASSWORD are configured in
      # GitHub repository secrets. Linter warnings are false positives.
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          # yamllint disable-line rule:line-length
          username: ${{ secrets.DOCKER_USERNAME }}
          # yamllint disable-line rule:line-length
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker metadata (labels + tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build & push image
        id: build
        uses: docker/build-push-action@v6
        with:
          # IMPORTANT: repo root context enables Dockerfile to access ops/nginx/*
          context: .
          file: frontend/Dockerfile
          push: true
          build-args: |
            VITE_API_BASE=${{ env.VITE_API_BASE }}
            RUN_TESTS=false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      # ----------------------------------------------------------------------
      # 5) Install Koyeb CLI (latest, with retry)
      #    - Fetches the latest release from GitHub with basic retry logic.
      #    - Installs to $HOME/.koyeb/bin and exports PATH.
      # ----------------------------------------------------------------------
      - name: Install Koyeb CLI
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.koyeb/bin"
          # Discover latest version (no jq). If discovery fails, fall back to a known version.
          VER="$(curl -fsSL --retry 5 --retry-connrefused --retry-delay 2 \
                https://api.github.com/repos/koyeb/koyeb-cli/releases/latest \
                | grep -oE '"tag_name":\s*"v[0-9.]+"' | head -n1 \
                | sed -E 's/.*"v([^"]+)".*/\1/')" || VER=""
          if [ -z "$VER" ]; then
            VER="4.4.1"  # fallback pin; update when needed
          fi
          TARBALL="koyeb-cli_${VER}_linux_amd64.tar.gz"
          URL="https://github.com/koyeb/koyeb-cli/releases/download/v${VER}/${TARBALL}"
          echo "Installing Koyeb CLI v${VER} from ${URL}"
          curl -fsSL --retry 5 --retry-connrefused --retry-delay 2 -o /tmp/koyeb.tgz "$URL"
          tar -xzf /tmp/koyeb.tgz -C "$HOME/.koyeb/bin"
          rm /tmp/koyeb.tgz
          echo "$HOME/.koyeb/bin" >> "$GITHUB_PATH"


      - name: Koyeb CLI version
        run: koyeb version

      # ----------------------------------------------------------------------
      # 6) Authenticate Koyeb (non-interactive CI)
      #    - Write token to ~/.koyeb.yaml with strict perms (no shell history/env leaks).
      # ----------------------------------------------------------------------
      - name: Authenticate Koyeb (CI mode)
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
        run: |
          set -euo pipefail
          umask 077
          mkdir -p "$HOME"
          printf "token: %s\n" "$KOYEB_TOKEN" > "$HOME/.koyeb.yaml"
          chmod 600 "$HOME/.koyeb.yaml"

      # ----------------------------------------------------------------------
      # 7) Deploy to Koyeb (pin by digest + keep ports pinned)
      #    - Pins by content digest for deterministic rollouts and safe rollback.
      #    - Always pass --ports to prevent accidental port config drift.
      # ----------------------------------------------------------------------
      - name: Deploy to Koyeb (pin by digest + keep ports)
        env:
          IMG_DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          set -euo pipefail
          FULL_REF="docker.io/${{ env.IMAGE_NAME }}@${IMG_DIGEST}"
          SVC="${{ env.KOYEB_APP }}/${{ env.KOYEB_SERVICE }}"
          echo "Updating $SVC to $FULL_REF ..."
          koyeb service update "$SVC" \
            --docker "$FULL_REF" \
            --ports 8080:http

      # ----------------------------------------------------------------------
      # 8) Post-deploy health gate (authoritative platform status)
      #    - Wait for service status=HEALTHY via Koyeb CLI (not public curl).
      #    - On timeout, emit diagnostics to aid triage.
      # ----------------------------------------------------------------------
      - name: Wait for Koyeb service to be HEALTHY
        run: |
          set -euo pipefail
          SVC="${{ env.KOYEB_APP }}/${{ env.KOYEB_SERVICE }}"
          echo "Waiting for $SVC to be HEALTHY..."
          for i in $(seq 1 60); do  # ~5 minutes
            if koyeb service describe "$SVC" 2>/dev/null \
              | tr '[:upper:]' '[:lower:]' | grep -q 'healthy'; then
              echo "Service reports HEALTHY."
              exit 0
            fi
            echo "Not healthy yet... ($i/60)"
            sleep 5
          done
          echo "::group::Koyeb diagnostics"
          koyeb service describe "$SVC" || true
          koyeb service deployments list "$SVC" --limit 5 || true
          koyeb service instances list "$SVC" || true
          echo "::endgroup::"
          exit 1

      # ----------------------------------------------------------------------
      # 9) (Optional) Public URL smoke test
      #    - After platform reports healthy, verify the public endpoint returns 200.
      #    - This catches CDN/edge/route misconfig independent of container health.
      # ----------------------------------------------------------------------
      - name: Smoke test public URL
        if: ${{ success() }}
        env:
          URL: ${{ env.FRONTEND_URL }}
        run: |
          set -euo pipefail
          # brief settle before probing the edge
          sleep 5
          for i in $(seq 1 60); do
            CODE="$(curl -sS -L -o /dev/null -w '%{http_code}' "$URL")"
            echo "Attempt $i: HTTP $CODE"
            if [ "$CODE" = "200" ]; then
              echo "Public URL ready."
              exit 0
            fi
            sleep 5
          done
          echo "::group::curl diagnostics"
          curl -I -L "$URL" || true
          curl -s -L "$URL" | head -n 60 || true
          echo "::endgroup::"
          exit 1
