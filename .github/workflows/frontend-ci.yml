name: Frontend CI & Deploy

# /**
#  * CI/CD Pipeline for Smart Supply Pro â€” Frontend (React + Vite + Nginx)
#  *
#  * Triggers:
#  *   - On push to main.
#  *   - Only when files under frontend/, ops/nginx/, or this workflow change.
#  *
#  * Pipeline stages (high-level):
#  *   1) Checkout repository.
#  *   2) Node setup + dependency install (with caching).
#  *   3) Run unit tests with GitHub Annotations (Vitest + github-actions reporter).
#  *   4) Build and push Docker image (tests skipped inside Docker to avoid duplication).
#  *   5) Deploy immutable image digest to Koyeb.
#  *   6) Post-deploy smoke test (HTTP 200 + SPA fallback on /dashboard).
#  *
#  * Key design choices:
#  *   - Tests run OUTSIDE Docker for richer feedback in PR/Actions UI.
#  *   - Image build uses repo root as context to allow COPY of ops/nginx/*.
#  *   - Deployment pins by image digest for safe, reproducible rollouts.
#  *   - Lightweight smoke test validates serving + SPA routing after deploy.
#  */

on:
  push:
    branches: [ main ]
    paths:
      - 'inventory-service/frontend/**'
      - 'inventory-service/ops/nginx/**'
      - '.github/workflows/frontend-ci.yml'

permissions:
  contents: read
  packages: write

concurrency:
  group: frontend-ci
  cancel-in-progress: false

env:
  # Docker image repository (Docker Hub)
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/ssp-frontend
  # Backend API base baked into the Vite build
  VITE_API_BASE: https://inventoryservice.fly.dev
  # Koyeb target (set as repo secrets)
  KOYEB_APP: ${{ secrets.KOYEB_APP }}          # e.g., "inventory-service"
  KOYEB_SERVICE: ${{ secrets.KOYEB_SERVICE }}  # e.g., "frontend"
  # Public URL of the deployed service (used by smoke test)
  FRONTEND_URL: https://inventory-service.koyeb.app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # ----------------------------------------------------------------------
      # 1) Source checkout
      # ----------------------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      # (Optional but recommended) Sanity check the expected tree
      - name: Sanity check list build context contents
        run: |
          echo "== PWD =="
          pwd
          echo "== Top-level ==="
          ls -la
          echo "== inventory-service ==="
          ls -la inventory-service || true
          echo "== inventory-service/frontend =="
          ls -la inventory-service/frontend || true
          echo "== inventory-service/ops/nginx =="
          ls -la inventory-service/ops/nginx || true
          echo "== .dockerignore at context root (inventory-service/.dockerignore is used by build) =="
          sed -n '1,200p' inventory-service/.dockerignore || true

      # ----------------------------------------------------------------------
      # 2) Node toolchain + dependency install
      #    - We install deps here (outside Docker) to run tests with annotations.
      #    - Cache: speeds up repeated installs across runs.
      # ----------------------------------------------------------------------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          # Use multi-line to tolerate either layout; Actions accepts multiple entries
          cache-dependency-path: |
            inventory-service/frontend/package-lock.json
            frontend/package-lock.json

      # 3) Keep installing and testing in the same folder
      - name: Install dependencies
        working-directory: inventory-service/frontend
        run: npm ci

      # ----------------------------------------------------------------------
      # 3) Unit tests with GitHub annotations (Vitest)
      #    - Uses built-in `github-actions` reporter for inline failure notes.
      #    - `--run` forces non-watch CI mode.
      # ----------------------------------------------------------------------
      - name: Run unit tests (Vitest with GH annotations)
        working-directory: inventory-service/frontend
        run: npx vitest --reporter=default --reporter=github-actions --run

      # ----------------------------------------------------------------------
      # 4) Build and push Docker image
      #    - Build context is repo root (.) to allow COPY ../ops/nginx/* in Dockerfile.
      #    - Skip running tests INSIDE Docker (RUN_TESTS=false) to avoid duplication.
      # ----------------------------------------------------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha
      # 4) Docker build MUST align to current Dockerfile location and context
      - name: Build & push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: inventory-service           # repo root => enables COPY ../ops/nginx/...
          file: inventory-service/frontend/Dockerfile  # Dockerfile location
          push: true
          build-args: |
            VITE_API_BASE=${{ env.VITE_API_BASE }}
            RUN_TESTS=false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # ----------------------------------------------------------------------
      # 5) Deploy to Koyeb (immutable digest)
      #    - Pins by content digest for deterministic rollouts and safe rollback.
      # ----------------------------------------------------------------------
      - name: Install Koyeb CLI
        run: |
          curl -fsSL https://get.koyeb.com | sh
          echo "$HOME/.koyeb/bin" >> $GITHUB_PATH

      - name: Authenticate Koyeb
        run: koyeb auth login --token "${{ secrets.KOYEB_TOKEN }}"

      - name: Deploy to Koyeb (pin by digest)
        env:
          IMG_DIGEST: ${{ steps.build.outputs.digest }}
        run: |
          FULL_REF="docker.io/${{ env.IMAGE_NAME }}@${IMG_DIGEST}"
          koyeb service update "${{ env.KOYEB_APP }}/${{ env.KOYEB_SERVICE }}" --docker "$FULL_REF"

      # ----------------------------------------------------------------------
      # 6) Post-deploy smoke test
      #    - Verifies HTTP 200 on root (/) and SPA fallback on a deep link.
      #    - Fails the job if the service does not become healthy within the
      #      allotted attempts.
      # ----------------------------------------------------------------------
      - name: Smoke test deployed app
        run: |
          set -euo pipefail
          URL="${{ env.FRONTEND_URL }}"

          echo "Waiting for app to be ready at $URL ..."
          STATUS=000
          for i in $(seq 1 30); do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            echo "Attempt $i: HTTP $STATUS"
            if [ "$STATUS" = "200" ]; then break; fi
            sleep 5
          done
          test "$STATUS" = "200"

          echo "Checking index.html references built assets..."
          curl -s "$URL" | grep -qi '<script type="module" src="/assets/' 

          echo "Checking SPA fallback on /dashboard..."
          DL_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/dashboard")
          test "$DL_STATUS" = "200"
          echo "Smoke test passed."
