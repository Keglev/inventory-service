name: Manual Build & Deploy (Emergency)

# /**
#  * Emergency/manual workflow to build and push Docker images.
#  * 
#  * Use this when:
#  *   - CI is broken but you need to deploy
#  *   - You want to build a specific version manually
#  *   - You need to test a build without triggering CI
#  *
#  * This workflow builds and pushes images, but does NOT deploy to Fly.io
#  * (deployment still requires manual `fly deploy` due to Oracle IP restrictions)
#  */

on:
  workflow_dispatch:

concurrency:
  group: production-deploy-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # /**
      #  * Step 1: Checkout the current Git branch.
      #  */
      - name: Checkout code
        uses: actions/checkout@v4

      # /**
      #  * Step 2: Set up JDK 17 using Temurin distribution.
      #  */
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # /**
      #  * Step 3: Authenticate with DockerHub.
      #  * Note: DOCKER_USERNAME and DOCKER_PASSWORD are configured in
      #  * GitHub repository secrets. Linter warnings are false positives.
      #  */
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          # yamllint disable-line rule:line-length
          username: ${{ secrets.DOCKER_USERNAME }}
          # yamllint disable-line rule:line-length
          password: ${{ secrets.DOCKER_PASSWORD }}

      # /**
      #  * Step 4: Capture the short Git commit SHA for tagging.
      #  */
      - name: Set Git SHA
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # /**
      #  * Step 5: Build Docker image with prod profile.
      #  */
      - name: Build Docker image (PROD and SHA)
        run: |
          docker build --build-arg PROFILE=prod \
            -t ${{ secrets.DOCKER_USERNAME }}/inventory-service:prod \
            -t ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA .

      # /**
      #  * Step 6: Push both tagged images to DockerHub.
      #  */
      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/inventory-service:prod
          docker push ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA

      # /**
      #  * Step 7: Deployment instructions for manual execution.
      #  */
      - name: Manual deployment instructions
        run: |
          echo "üöÄ Docker images pushed successfully!"
          echo ""
          echo "üìã To deploy to Fly.io manually from your local machine:"
          echo "   1. Update your Oracle DB IP whitelist with your current IP"
          echo "   2. Run: fly deploy --image ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA"
          echo ""
          echo "üê≥ Available images:"
          echo "   - ${{ secrets.DOCKER_USERNAME }}/inventory-service:prod"
          echo "   - ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA"
          echo ""
          echo "üåê After deployment, your app will be available at:"
          echo "   https://inventoryservice.fly.dev"
