name: Inventory Service CI/CD - CI Build & Test & Docker Build

# ============================================================================
# Smart Supply Pro — Backend (Inventory Service) CI/CD
#
# Triggers:
#   • push / pull_request on ANY branch, but ONLY when the backend allow-list changes
#   • manual run via workflow_dispatch
#
# Key points:
#   • No step outputs / no complicated conditionals (keeps linters quiet)
#   • Maven runs from inventory-service/ *if present*, else falls back to repo root
#   • Docker always builds with context = inventory-service/ (so COPY paths behave)
#   • Trivy gates on HIGH/CRITICAL CVEs
# ============================================================================

on:
  push:
    paths:
      - 'inventory-service/pom.xml'
      - 'inventory-service/mvnw'
      - 'inventory-service/mvnw.cmd'
      - 'inventory-service/.mvn/**'
      - 'inventory-service/src/**'
      - 'inventory-service/Dockerfile'
      - 'inventory-service/.dockerignore'
      - 'inventory-service/docker-compose.yml'
      - 'inventory-service/.env.example'
      - 'inventory-service/start.sh'
      - 'inventory-service/README.md'
      - '.github/workflows/ci-build.yml'   # run when this file changes
  pull_request:
    paths:
      - 'inventory-service/pom.xml'
      - 'inventory-service/mvnw'
      - 'inventory-service/mvnw.cmd'
      - 'inventory-service/.mvn/**'
      - 'inventory-service/src/**'
      - 'inventory-service/Dockerfile'
      - 'inventory-service/.dockerignore'
      - 'inventory-service/docker-compose.yml'
      - 'inventory-service/.env.example'
      - 'inventory-service/start.sh'
      - 'inventory-service/README.md'
      - '.github/workflows/ci-build.yml'
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      # Docker repo to push backend images to
      IMAGE_REPO: ${{ secrets.DOCKER_USERNAME }}/inventory-service
      # Pin image tag to the exact commit for traceability
      IMAGE_TAG_SHA: ${{ github.sha }}

    steps:
      # -----------------------------------------------------------------------
      # 1) Checkout repository
      # -----------------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -----------------------------------------------------------------------
      # 2) Toolchain: JDK 17 + Maven cache
      # -----------------------------------------------------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('inventory-service/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # -----------------------------------------------------------------------
      # 3) Build & test (test profile)
      #    -U refreshes metadata to honor patched BOMs when we bump versions
      #    Works whether backend lives in /inventory-service or repo root.
      # -----------------------------------------------------------------------
      - name: Build and Test with Maven
        run: |
          set -euo pipefail
          if [ -d "inventory-service" ]; then
            cd inventory-service
          else
            echo "WARNING: 'inventory-service' directory not found; running Maven in repo root."
          fi
          mvn -U clean verify -Dspring.profiles.active=test -Dtestcontainers.enabled=false
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      # Optional: show resolved Spring versions (non-blocking)
      - name: Show Spring core & Security versions
        run: |
          set -euo pipefail
          if [ -d "inventory-service" ]; then cd inventory-service; fi
          mvn -q dependency:list -DincludeGroupIds=org.springframework,org.springframework.security | \
            grep -E 'spring-core|spring-security-core' || true

      # -----------------------------------------------------------------------
      # 4) Docker login
      # -----------------------------------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # -----------------------------------------------------------------------
      # 5) Build image (tagged :dev and :<sha>)
      #    Build CONTEXT is the 'inventory-service' folder so Dockerfile COPYs work.
      #    '--no-cache' guarantees the fresh JAR is embedded; remove later for speed.
      # -----------------------------------------------------------------------
      - name: Build Docker image
        run: |
          set -euo pipefail
          if [ ! -d "inventory-service" ]; then
            echo "::error::inventory-service directory not found; cannot build image."
            exit 1
          fi
          docker build --no-cache \
            --build-arg PROFILE=dev \
            --build-arg ORACLE_WALLET_B64="${{ secrets.ORACLE_WALLET_B64 }}" \
            -t $IMAGE_REPO:dev \
            -t $IMAGE_REPO:${IMAGE_TAG_SHA} \
            inventory-service

      # Sanity: quick inspection (non-blocking)
      - name: Inspect image (start.sh excerpt + env)
        run: |
          echo "Image (sha): $IMAGE_REPO:${IMAGE_TAG_SHA}"
          docker run --rm $IMAGE_REPO:${IMAGE_TAG_SHA} sh -c '
            set -e
            echo "----- /app/start.sh (first 80 lines) -----"
            sed -n "1,80p" /app/start.sh || true
            echo "-------------------------------------------"
            echo "TNS_ADMIN in container:"
            printenv TNS_ADMIN || true
          '

      # -----------------------------------------------------------------------
      # 6) Push both tags
      # -----------------------------------------------------------------------
      - name: Push Docker images
        run: |
          docker push $IMAGE_REPO:dev
          docker push $IMAGE_REPO:${IMAGE_TAG_SHA}

      # -----------------------------------------------------------------------
      # 7) Trivy vulnerability scan — gate on HIGH/CRITICAL
      # -----------------------------------------------------------------------
      - name: Scan image for CVEs (Trivy)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG_SHA }}
          format: table
          scanners: vuln
          vuln-type: os,library
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '1'
