name: Inventory Service CI/CD - CI Build & Test & Docker Build

# /**
#  * CI/CD Pipeline for Smart Supply Pro - Inventory Microservice (Spring Boot)
#  *
#  * Trigger:
#  *   - Automatically runs on push and pull requests to the 'main' branch.
#  *   - Executes only if changes occur within inventory-service/ or this CI config file.
#  *
#  * Jobs:
#  *   1. Checkout and prepare the backend repository.
#  *   2. Configure Java and Maven environment.
#  *   3. Decode Oracle Wallet for secure Oracle DB connection.
#  *   4. Run full Maven build and tests with Spring 'test' profile (without Docker).
#  *   5. Build Docker image tagged with both 'dev' and current Git SHA.
#  *   6. Preflight check: run the image to verify Oracle DB connectivity.
#  *   7. Push Docker images to DockerHub.
#  */

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - 'inventory-service/**'
      - '.github/workflows/ci-build.yml'
  pull_request:
    branches: [ "main", "develop" ]
    paths:
      - 'inventory-service/**'
      - '.github/workflows/ci-build.yml'
concurrency:
    group: ci-${{ github.ref }}
    cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/inventory-service

    steps:
      # /**
      #  * Enables debug output to print all shell commands during execution.
      #  * Helps with troubleshooting build failures.
      #  */
      - name: Enable debug output
        run: set -x

      # /**
      #  * Checks out the repository's code so that the workflow can access it.
      #  */
      - name: Checkout code
        uses: actions/checkout@v4

      # /**
      #  * Configures Java Development Kit (JDK 17) using Eclipse Temurin distribution.
      #  * Required for building and running Spring Boot applications.
      #  */
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      # /**
      #  * Caches Maven dependencies (~/.m2) across workflow runs.
      #  * Speeds up builds by avoiding repeated downloads.
      #  */
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # /**
      #  * Stores the current short Git commit SHA in an environment variable.
      #  * Used to tag Docker images for traceability.
      #  */
      - name: Set Git SHA
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # /**
      #  * Runs unit and integration tests using the 'test' Spring profile.
      #  * Skips Testcontainers usage to avoid Docker-in-Docker complexity in CI.
      #  */
      - name: Build and Test with Maven (Test Profile)
        run: mvn clean verify -Dspring.profiles.active=test -Dtestcontainers.enabled=false
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      # /**
      #  * Logs into DockerHub using GitHub Secrets credentials.
      #  * Required to push Docker images to your DockerHub repository.
      #  */
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # /**
      # Build the Docker image with:
      # - dev tag for staging/testing environments.
      # - Git SHA tag for traceability and rollbacks.
      # Uses build-arg PROFILE=dev to inject Spring profile.
      #  */
      - name: Build Docker image (DEV and SHA)
        run: |
          docker build --build-arg PROFILE=dev \
                       --build-arg ORACLE_WALLET_B64="${{ secrets.ORACLE_WALLET_B64 }}" \
                       -t ${{ secrets.DOCKER_USERNAME }}/inventory-service:dev \
                       -t ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA .
      # --- ADD THIS STEP BEFORE YOUR "Preflight DB" docker run step ---
      - name: "Sanity check show start.sh inside the image"
        shell: bash
        run: |
          echo "Image: $IMAGE_NAME:$GIT_SHA"
          docker run --rm $IMAGE_NAME:$GIT_SHA sh -c '
            set -e
            echo "----- /app/start.sh (first 120 lines) -----"
            sed -n "1,120p" /app/start.sh || true
            echo "-------------------------------------------"
            echo "Default TNS_ADMIN baked into image:"
            printenv TNS_ADMIN || true
          '

          # /**
      #  * Pre-deploy database health verification:
      #  * - Runs the built image with wallet decoded at runtime (ORACLE_WALLET_B64).
      #  * - Sets SERVER_PORT=8081 and checks Actuator /actuator/health.
      #  * - Preserves wallet path at /app/wallet/Wallet_sspdb_fixed (unchanged).
      #  * - Bridges DB_* envs to Spring in start.sh (no app YAML changes needed).
      #  */

      # /**
      #  * Preflight: run the image, wait for health on port 8081, then stop.
      #  * Uses the SAME wallet path and envs as production (no path changes).
      #  */
      - name: Preflight Oracle connectivity (container)
        shell: bash
        env:
          DB_URL:  ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          ORACLE_WALLET_B64: ${{ secrets.ORACLE_WALLET_B64 }}
          ORACLE_WALLET_PASSWORD: ${{ secrets.ORACLE_WALLET_PASSWORD }}
        run: |
          set -euo pipefail

          docker rm -f inv-pre >/dev/null 2>&1 || true
          docker run -d --name inv-pre \
            -p 8081:8081 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e SERVER_PORT=8081 \
            -e DB_URL="$DB_URL" \
            -e DB_USER="$DB_USER" \
            -e DB_PASS="$DB_PASS" \
            -e ORACLE_WALLET_B64="$ORACLE_WALLET_B64" \
            -e ORACLE_WALLET_PASSWORD="$ORACLE_WALLET_PASSWORD" \
            ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA

          echo "Waiting for health (timeout 120s)..."
          deadline=$(( $(date +%s) + 120 ))
          until curl -fsS http://localhost:8081/actuator/health | grep -q '"status":"UP"'; do
            # If your app uses a custom endpoint instead, swap the curl line to:
            # curl -fsS http://localhost:8081/health/db >/dev/null && ok=1 && break
            if ! docker ps --format '{{.Names}}' | grep -q '^inv-pre$'; then
              echo "Container exited. Logs:" && docker logs inv-pre || true
              exit 1
            fi
            [ "$(date +%s)" -gt "$deadline" ] && { echo "Timed out. Logs:"; docker logs inv-pre || true; exit 1; }
            sleep 3
          done

          echo "----- recent container logs -----"
          docker logs inv-pre --since 20s || true

          docker rm -f inv-pre || true
          echo "Preflight DB health check passed."

      # /**
      #  * Push Docker images (dev & SHA).
      #  */
      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/inventory-service:dev
          docker push ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA
