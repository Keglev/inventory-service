name: Inventory Service CI/CD - CI Build & Test & Docker Build

# =============================================================================
# Smart Supply Pro — Backend (Inventory Service) CI/CD
#
# Purpose
#   - Build + test the Spring Boot backend.
#   - Build and push a Docker image tagged `:dev` and with the commit SHA.
#   - Gate on HIGH/CRITICAL vulnerabilities via Trivy (image scan).
#
# Trigger Model (monorepo-aware)
#   - This backend lives in `inventory-service/`, but that folder ALSO contains
#     non-backend content (e.g., `frontend/`, `docs/`, `lib/`, `logs/`, `oracle_wallet/`).
#   - We therefore use event-level path filters with explicit EXCLUDES to ensure
#     that frontend-only or docs-only commits DO NOT fire this workflow.
#
# Design Notes
#   - No job/step-level conditions or custom outputs — avoids linter “context might
#     be invalid” warnings in VS Code.
#   - All heavy commands run with clear, enterprise-grade comments for maintainability.
# =============================================================================

on:
  push:
    branches: [ "main", "develop" ]
    # Include only backend-relevant paths (exclude non-backend subtrees/files).         
  pull_request:
    branches: [ "main", "develop" ]
    paths:
      - 'inventory-service/**'
      - '!inventory-service/frontend/**'       # embedded frontend (handled by its own pipeline)
      - '!inventory-service/docs/**'           # documentation site / assets
      - '!inventory-service/lib/**'            # non-backend libs/cache
      - '!inventory-service/logs/**'           # local logs
      - '!inventory-service/oracle_wallet/**'  # secrets/material never used in CI context
      - '!inventory-service/fly.toml'          # infra meta; not required to build/test the JAR
  workflow_dispatch:

concurrency:
  # Prevent overlapping runs per branch — newest build cancels prior one.
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      # Centralized image repo reference; used by build/push/scan steps.
      IMAGE_REPO: ${{ secrets.DOCKER_USERNAME }}/inventory-service
      # Pin outputs (image tag) to the exact commit SHA for traceability & scans.
      IMAGE_TAG_SHA: ${{ github.sha }}

    steps:
      # -----------------------------------------------------------------------
      # 0) Diagnostics (verbose shell helps when triaging failures)
      # -----------------------------------------------------------------------
      - name: Enable debug output
        run: set -x

      # -----------------------------------------------------------------------
      # 1) Checkout source
      # -----------------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # -----------------------------------------------------------------------
      # 2) Toolchain: JDK 17 + Maven cache
      #    - Cache is keyed on pom.xml hashes across the repo; adjust if needed.
      # -----------------------------------------------------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # -----------------------------------------------------------------------
      # 3) Maven build & test
      #    - '-U' refreshes dependency metadata to pick up patched BOMs.
      #    - Testcontainers disabled to avoid Docker-in-Docker complexity in CI.
      # -----------------------------------------------------------------------
      - name: Build and Test with Maven (test profile)
        working-directory: inventory-service
        run: mvn -U clean verify -Dspring.profiles.active=test -Dtestcontainers.enabled=false
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      # (Informational) show which Spring artifacts/versions were actually resolved
      - name: Show Spring core & Security versions (non-blocking)
        working-directory: inventory-service
        run: |
          mvn -q dependency:list -DincludeGroupIds=org.springframework,org.springframework.security | \
            grep -E 'spring-core|spring-security-core' || true

      # -----------------------------------------------------------------------
      # 4) Docker login
      # -----------------------------------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # -----------------------------------------------------------------------
      # 5) Build container image
      #    - The build context is `inventory-service/`.
      #    - `--no-cache` guarantees the JAR in the image matches this build.
      #      Once things stabilize, you can remove `--no-cache` for faster builds.
      # -----------------------------------------------------------------------
      - name: Build Docker image (dev and sha tags)
        working-directory: inventory-service
        run: |
          docker build --no-cache \
            --build-arg PROFILE=dev \
            --build-arg ORACLE_WALLET_B64="${{ secrets.ORACLE_WALLET_B64 }}" \
            -t $IMAGE_REPO:dev \
            -t $IMAGE_REPO:${IMAGE_TAG_SHA} \
            .

      # -----------------------------------------------------------------------
      # 6) Sanity: inspect image content quickly (non-blocking)
      #    - Helps confirm the baked artifacts and environment.
      # -----------------------------------------------------------------------
      - name: Inspect image (start.sh excerpt + env)
        run: |
          echo "Image (sha): $IMAGE_REPO:${IMAGE_TAG_SHA}"
          docker run --rm $IMAGE_REPO:${IMAGE_TAG_SHA} sh -c '
            set -e
            echo "----- /app/start.sh (first 120 lines) -----"
            sed -n "1,120p" /app/start.sh || true
            echo "-------------------------------------------"
            echo "TNS_ADMIN in container:"
            printenv TNS_ADMIN || true
          '

      # -----------------------------------------------------------------------
      # 7) Push both tags (dev + commit sha)
      # -----------------------------------------------------------------------
      - name: Push Docker images
        run: |
          docker push $IMAGE_REPO:dev
          docker push $IMAGE_REPO:${IMAGE_TAG_SHA}

      # -----------------------------------------------------------------------
      # 8) Trivy scan — gate on HIGH/CRITICAL only
      #    - Scans the SHA-tagged image we just pushed.
      #    - If you want to relax the gate temporarily, change `severity` to
      #      'CRITICAL' or set `exit-code: 0` (not recommended long-term).
      # -----------------------------------------------------------------------
      - name: Scan image for CVEs (Trivy)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG_SHA }}
          format: 'table'
          scanners: 'vuln'          # faster: vulnerability scan only
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
