name: Inventory Service CI/CD - CI Build & Test & Docker Build

# =============================================================================
# Smart Supply Pro - Backend (Inventory Service) CI/CD
#
# Enterprise-grade pipeline guidelines (comments below are intentionally
# descriptive and non-functional):
# - Purpose: Build, test, and publish backend artifacts and container images.
# - Traceability: images are tagged by commit SHA and ":dev" for ephemeral flows.
# - Security: images are scanned (Trivy) and CI fails on HIGH/CRITICAL CVEs.
# - Layout support: supports both monorepo (repo root) and nested layout
#   (inventory-service/). The workflow triggers selectively for backend paths
#   to reduce spurious runs and guard sensitive secrets.
#
# Notes for maintainers:
# - Keep secret usage minimal and pinned to repository secrets. Avoid leaking
#   runtime secrets into build logs. Use the least-privilege tokens.
# - This file focuses on deterministic behavior: avoid runtime envs in hash
#   computations and prefer static patterns for cache keys.
# =============================================================================

on:
  push:
    branches: [ "main", "develop" ]
    # Allow-list of backend paths (both repo-root and inventory-service/ layouts)
    paths:
      # --- monorepo-style backend ---
      - 'inventory-service/pom.xml'
      - 'inventory-service/mvnw'
      - 'inventory-service/mvnw.cmd'
      - 'inventory-service/.mvn/**'
      - 'inventory-service/src/**'
      - 'inventory-service/Dockerfile'
      - 'inventory-service/.dockerignore'
      - 'inventory-service/docker-compose.yml'
      - 'inventory-service/.env.example'
      - 'inventory-service/start.sh'
      - 'inventory-service/README.md'
      # --- repo-root backend ---
      - 'pom.xml'
      - 'mvnw'
      - 'mvnw.cmd'
      - '.mvn/**'
      - 'src/**'
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker-compose.yml'
      - '.env.example'
      - 'start.sh'
      - 'README.md'
      # Run when this workflow changes
      - '.github/workflows/ci-build.yml'
  pull_request:
    branches: [ "main", "develop" ]
    paths:
      - 'inventory-service/pom.xml'
      - 'inventory-service/mvnw'
      - 'inventory-service/mvnw.cmd'
      - 'inventory-service/.mvn/**'
      - 'inventory-service/src/**'
      - 'inventory-service/Dockerfile'
      - 'inventory-service/.dockerignore'
      - 'inventory-service/docker-compose.yml'
      - 'inventory-service/.env.example'
      - 'inventory-service/start.sh'
      - 'inventory-service/README.md'
      - 'pom.xml'
      - 'mvnw'
      - 'mvnw.cmd'
      - '.mvn/**'
      - 'src/**'
      - 'Dockerfile'
      - '.dockerignore'
      - 'docker-compose.yml'
      - '.env.example'
      - 'start.sh'
      - 'README.md'
      - '.github/workflows/ci-build.yml'
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    # Grant write permissions to push coverage reports
    permissions:
      contents: write

    env:
      # Docker repo where backend images are pushed
      IMAGE_REPO: ${{ secrets.DOCKER_USERNAME }}/inventory-service
      # Pin image tag to the exact commit for traceability
      IMAGE_TAG_SHA: ${{ github.sha }}

    steps:
      # ---------------------------------------------------------------------
      # 1) Checkout repository with token for push access
      # ---------------------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # ---------------------------------------------------------------------
      # 2) Resolve backend directory (repo root vs ./inventory-service)
      #    Exports:
      #      BACKEND_DIR   - folder containing pom.xml & Dockerfile
      #      POM_PATH      - resolved pom path (for logs only)
      # ---------------------------------------------------------------------
      - name: Resolve backend paths
        id: be
        run: |
          set -euo pipefail

          if [ -f "inventory-service/pom.xml" ]; then
            DIR="inventory-service"
          elif [ -f "pom.xml" ]; then
            DIR="."
          else
            echo "::error::Could not find pom.xml at repo root or inventory-service/."
            exit 1
          fi

          echo "Detected backend directory: $DIR"
          echo "BACKEND_DIR=$DIR" >> "$GITHUB_ENV"
          if [ "$DIR" = "." ]; then
            echo "POM_PATH=pom.xml" >> "$GITHUB_ENV"
          else
            echo "POM_PATH=$DIR/pom.xml" >> "$GITHUB_ENV"
          fi

      # ---------------------------------------------------------------------
      # 3) Toolchain: JDK 17 + Maven cache
      #    NOTE: hashFiles() cannot reliably consume env vars; use static patterns
      #    to cover both layouts. This keeps linters & schema validators happy.
      # ---------------------------------------------------------------------
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml', 'inventory-service/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # ---------------------------------------------------------------------
      # 4) Build & test (test profile)
      #    '-U' refreshes metadata to honor patched BOMs when we bump versions.
      #    Testcontainers disabled for CI simplicity.
      # ---------------------------------------------------------------------
      - name: Build and Test with Maven
        run: |
          set -euo pipefail
          cd "$BACKEND_DIR"
          mvn -U clean verify -Dspring.profiles.active=test -Dtestcontainers.enabled=false
        env:
          # yamllint disable-line rule:line-length
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID: ${{ secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID }}
          SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET: ${{ secrets.SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET }}

      # Optional: show resolved Spring versions (non-blocking)
      - name: Show Spring core & Security versions
        run: |
          set -euo pipefail
          cd "$BACKEND_DIR"
          mvn -q dependency:list -DincludeGroupIds=org.springframework,org.springframework.security | \
            grep -E 'spring-core|spring-security-core' || true

      # ---------------------------------------------------------------------
      # 4.5) Copy JaCoCo coverage reports to docs (for GitHub Pages)
      # ---------------------------------------------------------------------
      - name: Copy test coverage reports
        run: |
          set -euo pipefail
          mkdir -p docs/backend/coverage
          if [ -d "$BACKEND_DIR/target/site/jacoco" ]; then
            cp -r $BACKEND_DIR/target/site/jacoco/* docs/backend/coverage/
            echo "‚úÖ JaCoCo coverage reports copied to docs/backend/coverage/"
            ls -la docs/backend/coverage/ | head -10
          else
            echo "‚ö†Ô∏è No JaCoCo reports found in $BACKEND_DIR/target/site/jacoco"
          fi

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-coverage
          path: docs/backend/coverage/

      - name: Commit coverage reports
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add coverage reports
          git add docs/backend/coverage/
          
          # Check if there are changes
          if git diff --cached --quiet; then
            echo "‚úÖ No coverage changes to commit."
          else
            echo "üìù Coverage reports changed, committing..."
            git commit -m "docs: update backend test coverage reports [skip ci]"

            # Determine push target. For pull_request events the GITHUB_REF is
            # the special hidden merge ref (refs/pull/<id>/merge) which cannot
            # be updated. In that case push to the PR head branch instead
            # (available in GITHUB_HEAD_REF). For normal push events use the
            # branch name derived from GITHUB_REF.
            if [ -n "${GITHUB_HEAD_REF:-}" ]; then
              targetBranch="$GITHUB_HEAD_REF"
              echo "Detected PR head branch: $targetBranch"
            else
              targetBranch=${GITHUB_REF#refs/heads/}
              echo "Detected target branch: $targetBranch"
            fi

            # Fetch the target branch and rebase to avoid push rejections
            git fetch origin "$targetBranch"
            echo "Attempting to rebase local changes onto origin/$targetBranch"
            if git pull --rebase origin "$targetBranch"; then
              echo "‚úÖ Rebase onto origin/$targetBranch successful"
              # Push using GITHUB_TOKEN to the branch ref on origin
              git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:refs/heads/$targetBranch
              echo "‚úÖ Coverage reports pushed successfully to refs/heads/$targetBranch"
            else
              echo "‚ö†Ô∏è Could not rebase coverage commit on top of remote branch. Aborting push to avoid conflicts."
              # Abort any partial rebase state and leave artifacts for manual inspection
              git rebase --abort || true
              echo "::warning::Coverage commit was not pushed because the remote branch advanced; please re-run workflow or merge manually."
            fi
          fi

      # ---------------------------------------------------------------------
      # 5) Docker login
      #    Note: DOCKER_USERNAME and DOCKER_PASSWORD are configured in
      #    GitHub repository secrets. Linter warnings are false positives.
      # ---------------------------------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          # yamllint disable-line rule:line-length
          username: ${{ secrets.DOCKER_USERNAME }}
          # yamllint disable-line rule:line-length
          password: ${{ secrets.DOCKER_PASSWORD }}

      # ---------------------------------------------------------------------
      # 6) Build image (tagged :dev and :<sha>)
      #    Build CONTEXT is the BACKEND_DIR so Dockerfile COPYs work for both layouts.
      #    '--no-cache' guarantees a fresh JAR is embedded; remove later for speed.
      # ---------------------------------------------------------------------
      - name: Build Docker image
        run: |
          set -euo pipefail
          if [ ! -f "$BACKEND_DIR/Dockerfile" ]; then
            echo "::error::Dockerfile not found at $BACKEND_DIR/Dockerfile"
            exit 1
          fi

          docker build --no-cache \
            --build-arg PROFILE=dev \
            --build-arg ORACLE_WALLET_B64="${{ secrets.ORACLE_WALLET_B64 }}" \
            -t $IMAGE_REPO:dev \
            -t $IMAGE_REPO:${IMAGE_TAG_SHA} \
            "$BACKEND_DIR"

      # Sanity: quick inspection (non-blocking)
      - name: Inspect image (start.sh excerpt + env)
        run: |
          echo "Image (sha): $IMAGE_REPO:${IMAGE_TAG_SHA}"
          docker run --rm $IMAGE_REPO:${IMAGE_TAG_SHA} sh -c '
            set -e
            echo "----- /app/start.sh (first 80 lines) -----"
            sed -n "1,80p" /app/start.sh || true
            echo "-------------------------------------------"
            echo "TNS_ADMIN in container:"
            printenv TNS_ADMIN || true
          '

      # ---------------------------------------------------------------------
      # 7) Push both tags
      # ---------------------------------------------------------------------
      - name: Push Docker images
        run: |
          docker push $IMAGE_REPO:dev
          docker push $IMAGE_REPO:${IMAGE_TAG_SHA}

      # ---------------------------------------------------------------------
      # 8) Trivy vulnerability scan - gate on HIGH/CRITICAL
      # ---------------------------------------------------------------------
      - name: Scan image for CVEs (Trivy)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG_SHA }}
          format: table
          scanners: vuln
          vuln-type: os,library
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          exit-code: '1'