name: Inventory Service CI/CD - CI Build & Test & Docker Build

# /**
#  * CI/CD Pipeline for Smart Supply Pro - Inventory Microservice (Spring Boot)
#  *
#  * Trigger:
#  *   - Automatically runs on push and pull requests to the 'main' branch.
#  *   - Executes only if changes occur within inventory-service/ or this CI config file.
#  *
#  * Jobs:
#  *   1. Checkout and prepare the backend repository.
#  *   2. Configure Java and Maven environment.
#  *   3. Decode Oracle Wallet for secure Oracle DB connection.
#  *   4. Run full Maven build and tests with Spring 'test' profile (without Docker).
#  *   5. Build Docker image tagged with both 'dev' and current Git SHA.
#  *   6. Push Docker images to DockerHub.
#  */

on:
  push:
    branches: [ "main" ]
    paths:
      - 'inventory-service/**'
      - '.github/workflows/ci-build.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'inventory-service/**'
      - '.github/workflows/ci-build.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # /**
      #  * Enables debug output to print all shell commands during execution.
      #  * Helps with troubleshooting build failures.
      #  */
      - name: Enable debug output
        run: set -x

      # /**
      #  * Checks out the repository's code so that the workflow can access it.
      #  */
      - name: Checkout code
        uses: actions/checkout@v4

      # /**
      #  * Configures Java Development Kit (JDK 17) using Eclipse Temurin distribution.
      #  * Required for building and running Spring Boot applications.
      #  */
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # /**
      #  * Caches Maven dependencies (~/.m2) across workflow runs.
      #  * Speeds up builds by avoiding repeated downloads.
      #  */
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # /**
      #  * Stores the current short Git commit SHA in an environment variable.
      #  * Used to tag Docker images for traceability.
      #  */
      - name: Set Git SHA
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # /**
      #  * Runs unit and integration tests using the 'test' Spring profile.
      #  * Skips Testcontainers usage to avoid Docker-in-Docker complexity in CI.
      #  */
      - name: Build and Test with Maven (Test Profile)
        run: mvn clean verify -Dspring.profiles.active=test -Dtestcontainers.enabled=false
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}

      # /**
      #  * Logs into DockerHub using GitHub Secrets credentials.
      #  * Required to push Docker images to your DockerHub repository.
      #  */
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # /**
      # Build the Docker image with:
      # - dev tag for staging/testing environments.
      # - Git SHA tag for traceability and rollbacks.
      # Uses build-arg PROFILE=dev to inject Spring profile.
      #  */
      - name: Build Docker image (DEV and SHA)
        run: |
          docker build --build-arg PROFILE=dev \
                       --build-arg ORACLE_WALLET_B64="${{ secrets.TNS_ADMIN_ZIP_B64 }}" \
                       -t ${{ secrets.DOCKER_USERNAME }}/inventory-service:dev \
                       -t ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA .
      
     # Preflight: run the built image, hit /health/db on port 8081, then stop
      - name: Preflight Oracle connectivity (container)
        env:
          DB_URL:  ${{ secrets.DB_URL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASS: ${{ secrets.DB_PASS }}
          # Your wallet secret name is TNS_ADMIN_ZIP_B64 in the build step.
          # Pass it through as ORACLE_WALLET_B64 if your entrypoint expects that name:
          ORACLE_WALLET_B64: ${{ secrets.TNS_ADMIN_ZIP_B64 }}
        run: |
          docker run --rm -d --name inv-pre \
            -p 8081:8081 \
            -e SPRING_PROFILES_ACTIVE=prod \
            -e DB_URL="$DB_URL" -e DB_USER="$DB_USER" -e DB_PASS="$DB_PASS" \
            -e TNS_ADMIN="/app/wallet" \
            -e ORACLE_WALLET_B64="$ORACLE_WALLET_B64" \
            ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA

          for i in {1..90}; do
            curl -sf http://localhost:8081/health/db && ok=1 && break || true 
            sleep 2
          done

          docker logs inv-pre --tail 200 || true
          docker rm -f inv-pre || true

          if [ "${ok:-0}" != "1" ]; then
            echo " Preflight DB health failed. Not pushing images."
            exit 1
          fi
          echo " Preflight DB health check passed."
      # /**
      #  * Pushes both Docker tags (dev and Git SHA) to DockerHub.
      #  */
      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/inventory-service:dev
          docker push ${{ secrets.DOCKER_USERNAME }}/inventory-service:$GIT_SHA
