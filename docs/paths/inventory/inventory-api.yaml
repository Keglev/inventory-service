openapi: 3.0.3
info:
  title: Inventory Service - Inventory Items
  description: Manage inventory items with full CRUD and search capabilities.
  version: "1.0.0"
  contact:
    name: Carlos Keglevich
    url: https://carloskeglevich.vercel.app
    email: carloskeglevich@gmail.com
  license:
    name: MIT License
    url: https://opensource.org/license/mit/
servers:
  - url: https://keglevich.github.io/inventory-service
    description: GitHub Pages

# Default: all endpoints require the session cookie unless explicitly opened with `security: []`
security:
  - cookieAuth: []

paths:
  /api/inventory:
    get:
      summary: Get all inventory items
      tags: [Inventory]
      security:
        - cookieAuth: []
      responses:
        '200':
          description: List of inventory items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        '401':
          $ref: '#/components/responses/UnauthorizedJson'
        '403':
          $ref: '#/components/responses/ForbiddenJson'

    post:
      summary: Create a new inventory item
      tags: [Inventory]
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '409':
          description: Conflict - item already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedJson'
        '403':
          $ref: '#/components/responses/ForbiddenJson'

  /api/inventory/{id}:
    get:
      summary: Get inventory item by ID
      tags: [Inventory]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Found the item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InventoryItem'
        '404':
          description: Item not found
        '401':
          $ref: '#/components/responses/UnauthorizedJson'
        '403':
          $ref: '#/components/responses/ForbiddenJson'

    put:
      summary: Update inventory item
      tags: [Inventory]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InventoryItem'
      responses:
        '200':
          description: Updated item
        '404':
          description: Not found
        '409':
          description: Conflict
        '401':
          $ref: '#/components/responses/UnauthorizedJson'
        '403':
          $ref: '#/components/responses/ForbiddenJson'

    delete:
      summary: Delete inventory item with reason
      tags: [Inventory]
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: query
          name: reason
          required: true
          schema:
            type: string
            enum: [DAMAGED, EXPIRED, SOLD, SCRAPPED]
      responses:
        '204':
          description: Deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedJson'
        '403':
          $ref: '#/components/responses/ForbiddenJson'

  /api/inventory/search:
    get:
      summary: Search inventory items by name
      tags: [Inventory]
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Matching items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryItem'
        '401':
          $ref: '#/components/responses/UnauthorizedJson'
        '403':
          $ref: '#/components/responses/ForbiddenJson'

components:
  schemas:
    InventoryItem:
      type: object
      properties:
        id:
          type: string
          example: "inv-123456"
        name:
          type: string
          example: "Steel Rod"
        supplierId:
          type: string
          example: "supplier-789"
        quantity:
          type: integer
          example: 100
        price:
          type: number
          format: double
          example: 25.5
        minimumQuantity:
          type: integer
          example: 10
        createdBy:
          type: string
          example: "ckbuzin1@gmail.com"
    ErrorResponse:
      type: object
      required: [message]
      properties:
        message:
          type: string
          example: Unauthorized
        path:
          type: string
          example: /api/inventory
        timestamp:
          type: string
          format: date-time
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            openid: OpenID Connect scope
            profile: Access basic profile
            email: Access email
    cookieAuth:
      type: apiKey
      in: cookie
      name: SESSION
      description: >
        Session cookie set after OAuth2 login. In servlet-only setups this may be JSESSIONID.
        With Spring Session the cookie is named SESSION (SameSite=None; Secure).
  responses:
    UnauthorizedJson:
      description: Not authenticated
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            default:
              value:
                message: Unauthorized
    ForbiddenJson:
      description: Authenticated but not allowed to access this resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            default:
              value:
                message: Forbidden

# Documentation-only metadata
x-publicPaths:
  - /health
  - /actuator/health
x-cors:
  allowedOrigins:
    - http://localhost:5173
    - https://localhost:5173
    - https://inventoryfrontend.fly.dev
  allowedMethods: [GET, POST, PUT, PATCH, DELETE, OPTIONS]
  allowedHeaders: ['*']
  allowCredentials: true
  notes: "Matches Spring Security CorsConfiguration; cookies require SameSite=None; Secure."
x-csrf:
  enabled: false
  notes: >
    CSRF is disabled globally for this portfolio project. In production, prefer enabling CSRF
    and ignoring it for REST endpoints (/api/**) only. Session cookie is used with OAuth2 login.
